# Generated by Django 4.1.4 on 2023-04-27 22:12

import datetime
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default=None, max_length=50)),
                ('created_at', models.DateTimeField(default=datetime.datetime.now)),
                ('updated_at', models.DateTimeField(default=datetime.datetime.now)),
            ],
        ),
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.TimeField(default=None)),
                ('end_time', models.TimeField(default=None)),
                ('date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default=None, max_length=20)),
                ('max_capacity', models.PositiveIntegerField(default=0)),
                ('is_available', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Teacher_Availability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_start', models.TimeField(default=None)),
                ('time_end', models.TimeField(default=None)),
                ('date', models.DateField(default=None)),
            ],
            options={
                'verbose_name': 'Teacher_Availability',
                'verbose_name_plural': 'Teacher_Availabilities',
            },
        ),
        migrations.CreateModel(
            name='Selected_exam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('e_x', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ex', related_query_name='ex', to='uni.exam')),
                ('t_a', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ta', related_query_name='ta', to='uni.teacher_availability')),
            ],
        ),
        migrations.AddField(
            model_name='exam',
            name='assigned_room',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='uni.room'),
        ),
        migrations.AddField(
            model_name='exam',
            name='course_exam',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='uni.course'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('ADMIN', 'Admin'), ('STUDENT', 'Student'), ('TEACHER', 'Teacher')], default='ADMIN', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('uni.user',),
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('uni.user',),
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('uni.user',),
        ),
        migrations.AddField(
            model_name='teacher_availability',
            name='teacher_av',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='uni.teacher'),
        ),
        migrations.CreateModel(
            name='Exam_Swap_Request',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.CharField(default=None, max_length=50)),
                ('status', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=datetime.datetime.now)),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='uni.exam')),
                ('requesting_professor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requested_swaps', related_query_name='requested_swaps', to='uni.teacher')),
                ('responding_professor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responded_swaps', related_query_name='responded_swaps', to='uni.teacher')),
            ],
        ),
        migrations.CreateModel(
            name='Exam_Registration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_date_time', models.DateTimeField(default=datetime.datetime.now)),
                ('seat_number', models.CharField(default='SA1', max_length=10)),
                ('associated_exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='uni.exam')),
                ('registered_student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='uni.student')),
                ('tecaher_exam_registration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_registrations', to='uni.teacher')),
            ],
        ),
    ]
